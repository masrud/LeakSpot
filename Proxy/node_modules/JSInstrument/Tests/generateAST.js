var fs            = require('fs');
var child_process = require('child_process');
//var sh            = require('execSync');
var esprima       = require('esprima');
var escodegen     = require('escodegen');
//var rocambole     = require('rocambole');
//var minify        = require('minify');
//var UglifyJS      = require('uglify-js');

var filename = '';

function getFile() {
    var FILESUFFIX1 = "INS";
    if (process.argv.length < 3) {
        console.log('Usage: analyze.js file.js');
        process.exit(1);
    }
    filename = process.argv[2];
    console.log('Reading ' + filename);
    var code = fs.readFileSync(filename, 'utf8');
    return code;
}

function minify() {
	var code = getFile();
	//    var newCode = minify.optimize(filename, {callback : jscompres});
	var result = UglifyJS.minify(code, {fromString: true});
	//instrument(filename, jscompres );
	var newFileName = filename.replace(".js",FILESUFFIX1+"minified.js");
	fs.writeFileSync(newFileName, result.code, "utf8");
}

function commanLineMinifier(filename, func) { 
    var minif = child_process.spawn('bash');           
    var result = '';
    minif.stdout.on('data', function(data) {       
    console.log("out on ");                                                
        result += data.toString();
    });                                                                                                                                   
    minif.stdout.on('end', function(data) {                                                                                               
        console.log("out on 2 "); 
        //console.log(result);
        func(result);
        //        console.log(data);                                                                                                                
    });                                               
    setTimeout( function() {       
        minif.stdin.write('java -jar yuicompressor-2.4.8.jar --nomunge  --disable-optimizations '+filename);        
	//minif.stdin.write('ls ');                 
        minif.stdin.end();
    }, 1000 );                                                                                                                                 
}                                                                                                                                                     

function callCommandLineMinifier() {
    var code = getFile();
    //  var newCode = minify.optimize(filename, {callback : jscompres});
    //  var result = UglifyJS.minify(code, {fromString: true});

    commanLineMinifier(filename, function(data) {
        var newFileName = filename.replace(".js",FILESUFFIX1+".js");
        fs.writeFileSync(newFileName, data, "utf8");
        return data;
    });
}

function testExecSync() {
    //var result = sh.exec('ls');
    //var result = sh.exec('java -jar yuicompressor-2.4.8.jar --nomunge  --disable-optimizations ff17.js ');
    //console.log(result.stdout);
    //      var result = sh.exec('java -jar compiler.jar  --compilation_level WHITESPACE_ONLY   --js  ff1.js');
    var result = sh.exec(' sh ../lib/exec.sh ff1.js ');
    console.log(result.stdout);
    //console.log(JSON.stringify(result));
}

function genNewCode() {
      var code = getFile();

      var options = {
          format: {
              indent: {
                  style: '',
                  base: 0,
                  adjustMultilineComment: false
              },
              newline: '\t',
              space: ' ',
              json: false,
              renumber: false,
              hexadecimal: false,
              quotes: 'double',
              escapeless: false,
              compact: false,
              parentheses: true,
              semicolons: true,
              safeConcatenation: false
          },  
          moz: {
              starlessGenerator: false,
              parenthesizedComprehensionBlock: false
          },  
          parse: null,
          comment: false,
          sourceMap: undefined,
          sourceMapRoot: null,
          sourceMapWithCode: false,
          directive: false,
          verbatim: undefined
      };  

      //var options = { format : {quotes: 'double'}};
      var ast = esprima.parse(code);
      var newCode = escodegen.generate(ast, options);

      var newFileName = filename.replace(".js",FILESUFFIX1+".js");
      fs.writeFileSync(newFileName, newCode, "utf8");
  }

  function generateASTs () {

      var code = getFile();
      var ast = esprima.parse(code);
      var newFileName = filename.replace(".js","oldAst.js");
      fs.writeFileSync(newFileName, JSON.stringify(ast, null, '\t'), "utf8");


      var options = {
          format: {
              indent: {
                  style: '',
                  base: 0,
                  adjustMultilineComment: false
              },
              newline: '\t',
              space: ' ',
              json: false,
              renumber: false,
              hexadecimal: false,
              quotes: 'double',
              escapeless: false,
              compact: false,
              parentheses: true,
              semicolons: true,
              safeConcatenation: false
          },  
          moz: {
              starlessGenerator: false,
              parenthesizedComprehensionBlock: false
          },  
          parse: null,
          comment: false,
          sourceMap: undefined,
          sourceMapRoot: null,
          sourceMapWithCode: false,
          directive: false,
          verbatim: undefined
      };

      var newCode = escodegen.generate(ast, options);
      var newAst = esprima.parse(newCode);

      var newASTFileName = filename.replace(".js","newAST"+".js");
      fs.writeFileSync(newASTFileName, JSON.stringify(newAst, null, '\t'), "utf8");
  }

  function genShExec() {
      var filename = process.argv[2];
      var result = sh.exec("cat " + filename + " | awk \'END{if (NR<200) print 1; else print 2;}\' ");
      console.log(result.stdout);
      if ( result.stdout == '1\n' )
          console.log("********");
      else 
          console.log("666666");
  }

  function replaceGenCode2 () {

      var a = "\xbb}other{ selected \xbb";
          var b = "\u00bb}other{ selected \u00bb";

              console.log(a);
              console.log(b);
              a =  a.replace(/\\x/g,'\\u00');   
              console.log(a);

              process.stdout.setEncoding('utf8');
              process.stdout.write(a);
              process.stdout.write("\n");

  }

  function replaceGenCode () {

      var FILESUFFIX1 = "INS";
      if (process.argv.length < 3) {
          console.log('Usage: analyze.js file.js');
          process.exit(1);
      }

      var filename = process.argv[2];
      console.log('Reading ' + filename);
      var code = fs.readFileSync(filename, 'utf8');


      var modifiedCode =  code.replace(/\\xa0/g,'\\u00a0'); 

      var newFileName = filename.replace(".js","Replaced.js");

      fs.writeFileSync(newFileName, modifiedCode, "utf8");
  }

  function generateCode() {
      var FILESUFFIX1 = "Modified";
      if (process.argv.length < 3) {
          console.log('Usage: analyze.js file.js');
          process.exit(1);
      }

      var filename = process.argv[2];
      console.log('Reading ' + filename);
      var code = fs.readFileSync(filename, 'utf8');

      //var options = {format: {quotes: 'auto'}};
      var options = { comment: true, loc: true, range: true};
      var comments =  esprima.parse(code, options).comments;
      console.log(comments);
      var ast = esprima.parse(code);
      var newCode = escodegen.generate(ast, options);

      var newFileName = filename.replace(".js",FILESUFFIX1+".js");
      fs.writeFileSync(newFileName, newCode, "utf8");
  }

function main() {
     var FILESUFFIX1 = "INS";
      if (process.argv.length < 3) {
          console.log('Usage: analyze.js file.js');
          process.exit(1);
      }

      var filename = process.argv[2];
      console.log('Reading ' + filename);
      var code = fs.readFileSync(filename, 'utf8');
        var offset = 0;
        var options = { comment: true, loc: true, range: true};
        var ast = esprima.parse(code, options);
        var comments = ast.comments;
        console.log(JSON.stringify(comments));
        
        var newCode = escodegen.generate(ast, {comment: true});
        console.log(".....................");
        console.log(newCode);

        console.log(comments.length);
        console.log("FFFFFFFFFFFFFFF");
        for (var i = comments.length-1; i >= 0; i--) {
            var comment = comments[i];
            var str = comment.value;
            var replace ="";
            if (comment.type == 'Block')
                replace = "\n/*"+ comment.value + "*/\n";
             else
                replace = "\n//" + comment.value + "\n";
            newCode = newCode.substring(0, comment.range[0]) +  replace +
                newCode.substring(comment.range[0], newCode.length);

  /*          console.log("111111111111111111111111");
            console.log(newCode.substring(0, comment.range[0]));
            console.log("2222222222222222222222222222");
            console.log(newCode.substring( comment.range[0], newCode.length));*/
            console.log("**********************************");
            console.log(newCode);
        }

        /*comments.forEach(function (comment) {
            var str = comment.value;
                newCode = newCode.substring(0, offset + comment.range[0]) + comment.value +
                newCode.substring(offset + comment.range[1]+1, newCode.length);
        });*/

  }
  function testrecom() {
      var FILESUFFIX1 = "Recom";
      var code = getFile();
      //  var options = {format: {quotes: 'auto'}};
      //  var options = { comment: true, loc: true, range: true};
      //  var comments =  esprima.parse(code, options).comments;
      //  console.log(comments);
      var ast = rocambole.parse(code);
      console.log(ast);
  }

  function testComments() {
	  var code = getFile();
	  var offset = 0;
	  var options = { comment: true, loc: true, range: true, tokens: true, raw: false};
	  var ast = esprima.parse(code, options);
	  ast = escodegen.attachComments(ast, ast.comments, ast.tokens);

	  var comments = ast.comments;
	  //console.log(JSON.stringify(comments));

	  var newCode = escodegen.generate(ast, {comment: true, format: { 
		  indent: { 
			  adjustMultilineComment: true 
		  } 
	  }  
	  });
	  console.log(newCode);
	  console.log(comments.length);
	  /*
	  for (var i = comments.length-1; i >= 0; i--) {
	  var comment = comments[i];
	  var str = comment.value;
	  var replace ="";
	  if (comment.type == 'Block')
	  //      replace = "\n/*"+ comment.value + "/\n";
  		else
	  replace = "\n//" + comment.value + "\n";
	  newCode = newCode.substring(0, comment.range[0]) +  replace +
	  newCode.substring(comment.range[0], newCode.length);

	  console.log(newCode.substring(0, comment.range[0]));
	  console.log(newCode.substring( comment.range[0], newCode.length));
	  console.log(newCode);
	  }
	  */

	  /*comments.forEach(function (comment) {
		  var str = comment.value;
		  newCode = newCode.substring(0, offset + comment.range[0]) + comment.value +
		  newCode.substring(offset + comment.range[1]+1, newCode.length);
		  });*/
  }

function testString() {
      var code = getFile();
      var offset = 0;
      //var options = { comment: true, loc: true, range: true, tokens: true, raw: true, tolerant: true};
      var options = { comment: true, loc: true, range: true, tokens: true, tolerant: true};
      var ast = esprima.parse(code, options);
      ast = escodegen.attachComments(ast, ast.comments, ast.tokens);

      var comments = ast.comments;
      //console.log(JSON.stringify(comments));

      var newCode = escodegen.generate(ast, {comment: true, format: { 
            raw: false,
          indent: { 
              adjustMultilineComment: true 
          } 
      },
      parse: esprima.parse
      });
      console.log(newCode);
      console.log(comments.length);
  }

  //testString();
  generateASTs();

  function generateASTconsole () {

      var code = getFile();
//      var ast = esprima.parse(code, {loc: true, raw:true, loc:{source:'h3.js'}});
      var ast = esprima.parse(code, {loc: true, raw:true, source:'h3.js'});
//      var ast = esprima.parse(code, {loc:true, raw:true});
      console.log(JSON.stringify(ast, null, '\t'));
  }

